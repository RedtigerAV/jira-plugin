/* tslint:disable */

/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AddFieldBeanModel } from '../model/addFieldBean';
import { MoveFieldBeanModel } from '../model/moveFieldBean';
import { PageBeanScreenModel } from '../model/pageBeanScreen';
import { PageBeanScreenSchemeModel } from '../model/pageBeanScreenScheme';
import { ScreenableFieldModel } from '../model/screenableField';
import { ScreenableTabModel } from '../model/screenableTab';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class ScreensService {

    protected basePath = 'https://timgo.atlassian.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add field to default screen
     * Adds a field to the default tab of the default screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the field.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addFieldToDefaultScreen(fieldId: string, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public addFieldToDefaultScreen(fieldId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public addFieldToDefaultScreen(fieldId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public addFieldToDefaultScreen(fieldId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fieldId === null || fieldId === undefined) {
            throw new Error('Required parameter fieldId was null or undefined when calling addFieldToDefaultScreen.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<object>(`${this.configuration.basePath}/rest/api/3/screens/addToDefault/${encodeURIComponent(String(fieldId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create screen tab
     * Creates a tab for a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param screenId The ID of the screen.
     * @param screenableTabModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addScreenTab(screenId: number, screenableTabModel: ScreenableTabModel, observe?: 'body', reportProgress?: boolean): Observable<ScreenableTabModel>;
    public addScreenTab(screenId: number, screenableTabModel: ScreenableTabModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ScreenableTabModel>>;
    public addScreenTab(screenId: number, screenableTabModel: ScreenableTabModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ScreenableTabModel>>;
    public addScreenTab(screenId: number, screenableTabModel: ScreenableTabModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling addScreenTab.');
        }
        if (screenableTabModel === null || screenableTabModel === undefined) {
            throw new Error('Required parameter screenableTabModel was null or undefined when calling addScreenTab.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ScreenableTabModel>(`${this.configuration.basePath}/rest/api/3/screens/${encodeURIComponent(String(screenId))}/tabs`,
            screenableTabModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add screen tab field
     * Adds a field to a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param screenId The ID of the screen.
     * @param tabId The ID of the screen tab.
     * @param addFieldBeanModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addScreenTabField(screenId: number, tabId: number, addFieldBeanModel: AddFieldBeanModel, observe?: 'body', reportProgress?: boolean): Observable<ScreenableFieldModel>;
    public addScreenTabField(screenId: number, tabId: number, addFieldBeanModel: AddFieldBeanModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ScreenableFieldModel>>;
    public addScreenTabField(screenId: number, tabId: number, addFieldBeanModel: AddFieldBeanModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ScreenableFieldModel>>;
    public addScreenTabField(screenId: number, tabId: number, addFieldBeanModel: AddFieldBeanModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling addScreenTabField.');
        }
        if (tabId === null || tabId === undefined) {
            throw new Error('Required parameter tabId was null or undefined when calling addScreenTabField.');
        }
        if (addFieldBeanModel === null || addFieldBeanModel === undefined) {
            throw new Error('Required parameter addFieldBeanModel was null or undefined when calling addScreenTabField.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ScreenableFieldModel>(`${this.configuration.basePath}/rest/api/3/screens/${encodeURIComponent(String(screenId))}/tabs/${encodeURIComponent(String(tabId))}/fields`,
            addFieldBeanModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all screen schemes
     * Returns all screen schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllScreenSchemes(startAt?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<PageBeanScreenSchemeModel>;
    public getAllScreenSchemes(startAt?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageBeanScreenSchemeModel>>;
    public getAllScreenSchemes(startAt?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageBeanScreenSchemeModel>>;
    public getAllScreenSchemes(startAt?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startAt !== undefined && startAt !== null) {
            queryParameters = queryParameters.set('startAt', <any>startAt);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageBeanScreenSchemeModel>(`${this.configuration.basePath}/rest/api/3/screenscheme`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all screen tab fields
     * Returns all fields for a screen tab.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     * @param screenId The ID of the screen.
     * @param tabId The ID of the screen tab.
     * @param projectKey The key of the project.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllScreenTabFields(screenId: number, tabId: number, projectKey?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ScreenableFieldModel>>;
    public getAllScreenTabFields(screenId: number, tabId: number, projectKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ScreenableFieldModel>>>;
    public getAllScreenTabFields(screenId: number, tabId: number, projectKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ScreenableFieldModel>>>;
    public getAllScreenTabFields(screenId: number, tabId: number, projectKey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling getAllScreenTabFields.');
        }
        if (tabId === null || tabId === undefined) {
            throw new Error('Required parameter tabId was null or undefined when calling getAllScreenTabFields.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (projectKey !== undefined && projectKey !== null) {
            queryParameters = queryParameters.set('projectKey', <any>projectKey);
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ScreenableFieldModel>>(`${this.configuration.basePath}/rest/api/3/screens/${encodeURIComponent(String(screenId))}/tabs/${encodeURIComponent(String(tabId))}/fields`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all screen tabs
     * Returns the list of tabs for a screen.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
     * @param screenId The ID of the screen.
     * @param projectKey The key of the project.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllScreenTabs(screenId: number, projectKey?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ScreenableTabModel>>;
    public getAllScreenTabs(screenId: number, projectKey?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ScreenableTabModel>>>;
    public getAllScreenTabs(screenId: number, projectKey?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ScreenableTabModel>>>;
    public getAllScreenTabs(screenId: number, projectKey?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling getAllScreenTabs.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (projectKey !== undefined && projectKey !== null) {
            queryParameters = queryParameters.set('projectKey', <any>projectKey);
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ScreenableTabModel>>(`${this.configuration.basePath}/rest/api/3/screens/${encodeURIComponent(String(screenId))}/tabs`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all screens
     * Returns all screens.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllScreens(startAt?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<PageBeanScreenModel>;
    public getAllScreens(startAt?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageBeanScreenModel>>;
    public getAllScreens(startAt?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageBeanScreenModel>>;
    public getAllScreens(startAt?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startAt !== undefined && startAt !== null) {
            queryParameters = queryParameters.set('startAt', <any>startAt);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageBeanScreenModel>(`${this.configuration.basePath}/rest/api/3/screens`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get available screen fields
     * Returns the fields that can be added to a tab on a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param screenId The ID of the screen.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAvailableScreenFields(screenId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<ScreenableFieldModel>>;
    public getAvailableScreenFields(screenId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ScreenableFieldModel>>>;
    public getAvailableScreenFields(screenId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ScreenableFieldModel>>>;
    public getAvailableScreenFields(screenId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling getAvailableScreenFields.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ScreenableFieldModel>>(`${this.configuration.basePath}/rest/api/3/screens/${encodeURIComponent(String(screenId))}/availableFields`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get screens for a field
     * Returns a [paginated](#pagination) list of the screens a field is used in.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param fieldId The ID of the field to return screens for.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getScreensForField(fieldId: string, startAt?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<PageBeanScreenModel>;
    public getScreensForField(fieldId: string, startAt?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageBeanScreenModel>>;
    public getScreensForField(fieldId: string, startAt?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageBeanScreenModel>>;
    public getScreensForField(fieldId: string, startAt?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fieldId === null || fieldId === undefined) {
            throw new Error('Required parameter fieldId was null or undefined when calling getScreensForField.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startAt !== undefined && startAt !== null) {
            queryParameters = queryParameters.set('startAt', <any>startAt);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageBeanScreenModel>(`${this.configuration.basePath}/rest/api/3/field/${encodeURIComponent(String(fieldId))}/screens`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Move screen tab
     * Moves a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param screenId The ID of the screen.
     * @param tabId The ID of the screen tab.
     * @param pos The position of tab. The base index is 0.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public moveScreenTab(screenId: number, tabId: number, pos: number, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public moveScreenTab(screenId: number, tabId: number, pos: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public moveScreenTab(screenId: number, tabId: number, pos: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public moveScreenTab(screenId: number, tabId: number, pos: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling moveScreenTab.');
        }
        if (tabId === null || tabId === undefined) {
            throw new Error('Required parameter tabId was null or undefined when calling moveScreenTab.');
        }
        if (pos === null || pos === undefined) {
            throw new Error('Required parameter pos was null or undefined when calling moveScreenTab.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<object>(`${this.configuration.basePath}/rest/api/3/screens/${encodeURIComponent(String(screenId))}/tabs/${encodeURIComponent(String(tabId))}/move/${encodeURIComponent(String(pos))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Move screen tab field
     * Moves a screen tab field.  If &#x60;after&#x60; and &#x60;position&#x60; are provided in the request, &#x60;position&#x60; is ignored.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param screenId The ID of the screen.
     * @param tabId The ID of the screen tab.
     * @param id The ID of the field.
     * @param moveFieldBeanModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public moveScreenTabField(screenId: number, tabId: number, id: string, moveFieldBeanModel: MoveFieldBeanModel, observe?: 'body', reportProgress?: boolean): Observable<object>;
    public moveScreenTabField(screenId: number, tabId: number, id: string, moveFieldBeanModel: MoveFieldBeanModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<object>>;
    public moveScreenTabField(screenId: number, tabId: number, id: string, moveFieldBeanModel: MoveFieldBeanModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<object>>;
    public moveScreenTabField(screenId: number, tabId: number, id: string, moveFieldBeanModel: MoveFieldBeanModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (screenId === null || screenId === undefined) {
            throw new Error('Required parameter screenId was null or undefined when calling moveScreenTabField.');
        }
        if (tabId === null || tabId === undefined) {
            throw new Error('Required parameter tabId was null or undefined when calling moveScreenTabField.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling moveScreenTabField.');
        }
        if (moveFieldBeanModel === null || moveFieldBeanModel === undefined) {
            throw new Error('Required parameter moveFieldBeanModel was null or undefined when calling moveScreenTabField.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<object>(`${this.configuration.basePath}/rest/api/3/screens/${encodeURIComponent(String(screenId))}/tabs/${encodeURIComponent(String(tabId))}/fields/${encodeURIComponent(String(id))}/move`,
            moveFieldBeanModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
