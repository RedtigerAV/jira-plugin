/* tslint:disable */

/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { DefaultWorkflowModel } from '../model/defaultWorkflow';
import { IssueTypeWorkflowMappingModel } from '../model/issueTypeWorkflowMapping';
import { IssueTypesWorkflowMappingModel } from '../model/issueTypesWorkflowMapping';
import { PageBeanWorkflowSchemeModel } from '../model/pageBeanWorkflowScheme';
import { WorkflowSchemeModel } from '../model/workflowScheme';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class WorkflowSchemesService {

    protected basePath = 'https://timgo.atlassian.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create workflow scheme
     * Creates a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param workflowSchemeModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createWorkflowScheme(workflowSchemeModel: WorkflowSchemeModel, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public createWorkflowScheme(workflowSchemeModel: WorkflowSchemeModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public createWorkflowScheme(workflowSchemeModel: WorkflowSchemeModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public createWorkflowScheme(workflowSchemeModel: WorkflowSchemeModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (workflowSchemeModel === null || workflowSchemeModel === undefined) {
            throw new Error('Required parameter workflowSchemeModel was null or undefined when calling createWorkflowScheme.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme`,
            workflowSchemeModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete default workflow
     * Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira\&#39;s system workflow (the *jira* workflow).  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme.
     * @param updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDefaultWorkflow(id: number, updateDraftIfNeeded?: boolean, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public deleteDefaultWorkflow(id: number, updateDraftIfNeeded?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public deleteDefaultWorkflow(id: number, updateDraftIfNeeded?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public deleteDefaultWorkflow(id: number, updateDraftIfNeeded?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteDefaultWorkflow.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (updateDraftIfNeeded !== undefined && updateDraftIfNeeded !== null) {
            queryParameters = queryParameters.set('updateDraftIfNeeded', <any>updateDraftIfNeeded);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/default`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete issue types for workflow in workflow scheme
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme.
     * @param workflowName The name of the workflow.
     * @param updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteWorkflowMapping(id: number, workflowName: string, updateDraftIfNeeded?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteWorkflowMapping(id: number, workflowName: string, updateDraftIfNeeded?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteWorkflowMapping(id: number, workflowName: string, updateDraftIfNeeded?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteWorkflowMapping(id: number, workflowName: string, updateDraftIfNeeded?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteWorkflowMapping.');
        }
        if (workflowName === null || workflowName === undefined) {
            throw new Error('Required parameter workflowName was null or undefined when calling deleteWorkflowMapping.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (workflowName !== undefined && workflowName !== null) {
            queryParameters = queryParameters.set('workflowName', <any>workflowName);
        }
        if (updateDraftIfNeeded !== undefined && updateDraftIfNeeded !== null) {
            queryParameters = queryParameters.set('updateDraftIfNeeded', <any>updateDraftIfNeeded);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/workflow`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete workflow scheme
     * Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as &#x60;schemeId&#x60;. For example, *schemeId&#x3D;10301*.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteWorkflowScheme(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteWorkflowScheme(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteWorkflowScheme(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteWorkflowScheme(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteWorkflowScheme.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete workflow for issue type in workflow scheme
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme.
     * @param issueType The ID of the issue type.
     * @param updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteWorkflowSchemeIssueType(id: number, issueType: string, updateDraftIfNeeded?: boolean, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public deleteWorkflowSchemeIssueType(id: number, issueType: string, updateDraftIfNeeded?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public deleteWorkflowSchemeIssueType(id: number, issueType: string, updateDraftIfNeeded?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public deleteWorkflowSchemeIssueType(id: number, issueType: string, updateDraftIfNeeded?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteWorkflowSchemeIssueType.');
        }
        if (issueType === null || issueType === undefined) {
            throw new Error('Required parameter issueType was null or undefined when calling deleteWorkflowSchemeIssueType.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (updateDraftIfNeeded !== undefined && updateDraftIfNeeded !== null) {
            queryParameters = queryParameters.set('updateDraftIfNeeded', <any>updateDraftIfNeeded);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/issuetype/${encodeURIComponent(String(issueType))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all workflow schemes
     * Returns a paginated list of all workflow schemes, not including draft workflow schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllWorkflowSchemes(startAt?: number, maxResults?: number, observe?: 'body', reportProgress?: boolean): Observable<PageBeanWorkflowSchemeModel>;
    public getAllWorkflowSchemes(startAt?: number, maxResults?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageBeanWorkflowSchemeModel>>;
    public getAllWorkflowSchemes(startAt?: number, maxResults?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageBeanWorkflowSchemeModel>>;
    public getAllWorkflowSchemes(startAt?: number, maxResults?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startAt !== undefined && startAt !== null) {
            queryParameters = queryParameters.set('startAt', <any>startAt);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageBeanWorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get default workflow
     * Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme.
     * @param returnDraftIfExists Set to &#x60;true&#x60; to return the default workflow for the workflow scheme\&#39;s draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDefaultWorkflow(id: number, returnDraftIfExists?: boolean, observe?: 'body', reportProgress?: boolean): Observable<DefaultWorkflowModel>;
    public getDefaultWorkflow(id: number, returnDraftIfExists?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DefaultWorkflowModel>>;
    public getDefaultWorkflow(id: number, returnDraftIfExists?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DefaultWorkflowModel>>;
    public getDefaultWorkflow(id: number, returnDraftIfExists?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDefaultWorkflow.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (returnDraftIfExists !== undefined && returnDraftIfExists !== null) {
            queryParameters = queryParameters.set('returnDraftIfExists', <any>returnDraftIfExists);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DefaultWorkflowModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/default`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get issue types for workflows in workflow scheme
     * Returns the workflow-issue type mappings for a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme.
     * @param workflowName The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
     * @param returnDraftIfExists Returns the mapping from the workflow scheme\&#39;s draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkflow(id: number, workflowName?: string, returnDraftIfExists?: boolean, observe?: 'body', reportProgress?: boolean): Observable<IssueTypesWorkflowMappingModel>;
    public getWorkflow(id: number, workflowName?: string, returnDraftIfExists?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IssueTypesWorkflowMappingModel>>;
    public getWorkflow(id: number, workflowName?: string, returnDraftIfExists?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IssueTypesWorkflowMappingModel>>;
    public getWorkflow(id: number, workflowName?: string, returnDraftIfExists?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getWorkflow.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (workflowName !== undefined && workflowName !== null) {
            queryParameters = queryParameters.set('workflowName', <any>workflowName);
        }
        if (returnDraftIfExists !== undefined && returnDraftIfExists !== null) {
            queryParameters = queryParameters.set('returnDraftIfExists', <any>returnDraftIfExists);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<IssueTypesWorkflowMappingModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/workflow`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get workflow scheme
     * Returns a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as &#x60;schemeId&#x60;. For example, *schemeId&#x3D;10301*.
     * @param returnDraftIfExists Returns the workflow scheme\&#39;s draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkflowScheme(id: number, returnDraftIfExists?: boolean, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public getWorkflowScheme(id: number, returnDraftIfExists?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public getWorkflowScheme(id: number, returnDraftIfExists?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public getWorkflowScheme(id: number, returnDraftIfExists?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getWorkflowScheme.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (returnDraftIfExists !== undefined && returnDraftIfExists !== null) {
            queryParameters = queryParameters.set('returnDraftIfExists', <any>returnDraftIfExists);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get workflow for issue type in workflow scheme
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme.
     * @param issueType The ID of the issue type.
     * @param returnDraftIfExists Returns the mapping from the workflow scheme\&#39;s draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkflowSchemeIssueType(id: number, issueType: string, returnDraftIfExists?: boolean, observe?: 'body', reportProgress?: boolean): Observable<IssueTypeWorkflowMappingModel>;
    public getWorkflowSchemeIssueType(id: number, issueType: string, returnDraftIfExists?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IssueTypeWorkflowMappingModel>>;
    public getWorkflowSchemeIssueType(id: number, issueType: string, returnDraftIfExists?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IssueTypeWorkflowMappingModel>>;
    public getWorkflowSchemeIssueType(id: number, issueType: string, returnDraftIfExists?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getWorkflowSchemeIssueType.');
        }
        if (issueType === null || issueType === undefined) {
            throw new Error('Required parameter issueType was null or undefined when calling getWorkflowSchemeIssueType.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (returnDraftIfExists !== undefined && returnDraftIfExists !== null) {
            queryParameters = queryParameters.set('returnDraftIfExists', <any>returnDraftIfExists);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<IssueTypeWorkflowMappingModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/issuetype/${encodeURIComponent(String(issueType))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set workflow for issue type in workflow scheme
     * Sets the workflow for an issue type in a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme.
     * @param issueType The ID of the issue type.
     * @param issueTypeWorkflowMappingModel The issue type-project mapping.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setWorkflowSchemeIssueType(id: number, issueType: string, issueTypeWorkflowMappingModel: IssueTypeWorkflowMappingModel, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public setWorkflowSchemeIssueType(id: number, issueType: string, issueTypeWorkflowMappingModel: IssueTypeWorkflowMappingModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public setWorkflowSchemeIssueType(id: number, issueType: string, issueTypeWorkflowMappingModel: IssueTypeWorkflowMappingModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public setWorkflowSchemeIssueType(id: number, issueType: string, issueTypeWorkflowMappingModel: IssueTypeWorkflowMappingModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setWorkflowSchemeIssueType.');
        }
        if (issueType === null || issueType === undefined) {
            throw new Error('Required parameter issueType was null or undefined when calling setWorkflowSchemeIssueType.');
        }
        if (issueTypeWorkflowMappingModel === null || issueTypeWorkflowMappingModel === undefined) {
            throw new Error('Required parameter issueTypeWorkflowMappingModel was null or undefined when calling setWorkflowSchemeIssueType.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/issuetype/${encodeURIComponent(String(issueType))}`,
            issueTypeWorkflowMappingModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update default workflow
     * Sets the default workflow for a workflow scheme.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme.
     * @param defaultWorkflowModel The new default workflow.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDefaultWorkflow(id: number, defaultWorkflowModel: DefaultWorkflowModel, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public updateDefaultWorkflow(id: number, defaultWorkflowModel: DefaultWorkflowModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public updateDefaultWorkflow(id: number, defaultWorkflowModel: DefaultWorkflowModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public updateDefaultWorkflow(id: number, defaultWorkflowModel: DefaultWorkflowModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateDefaultWorkflow.');
        }
        if (defaultWorkflowModel === null || defaultWorkflowModel === undefined) {
            throw new Error('Required parameter defaultWorkflowModel was null or undefined when calling updateDefaultWorkflow.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/default`,
            defaultWorkflowModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set issue types for workflow in workflow scheme
     * Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.  Note that active workflow schemes cannot be edited. If the workflow scheme is active, set &#x60;updateDraftIfNeeded&#x60; to &#x60;true&#x60; in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme.
     * @param workflowName The name of the workflow.
     * @param issueTypesWorkflowMappingModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateWorkflowMapping(id: number, workflowName: string, issueTypesWorkflowMappingModel: IssueTypesWorkflowMappingModel, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public updateWorkflowMapping(id: number, workflowName: string, issueTypesWorkflowMappingModel: IssueTypesWorkflowMappingModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public updateWorkflowMapping(id: number, workflowName: string, issueTypesWorkflowMappingModel: IssueTypesWorkflowMappingModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public updateWorkflowMapping(id: number, workflowName: string, issueTypesWorkflowMappingModel: IssueTypesWorkflowMappingModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateWorkflowMapping.');
        }
        if (workflowName === null || workflowName === undefined) {
            throw new Error('Required parameter workflowName was null or undefined when calling updateWorkflowMapping.');
        }
        if (issueTypesWorkflowMappingModel === null || issueTypesWorkflowMappingModel === undefined) {
            throw new Error('Required parameter issueTypesWorkflowMappingModel was null or undefined when calling updateWorkflowMapping.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (workflowName !== undefined && workflowName !== null) {
            queryParameters = queryParameters.set('workflowName', <any>workflowName);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/workflow`,
            issueTypesWorkflowMappingModel,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update workflow scheme
     * Updates a workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that &#x60;updateDraftIfNeeded&#x60; is set to &#x60;true&#x60;.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as &#x60;schemeId&#x60;. For example, *schemeId&#x3D;10301*.
     * @param workflowSchemeModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateWorkflowScheme(id: number, workflowSchemeModel: WorkflowSchemeModel, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public updateWorkflowScheme(id: number, workflowSchemeModel: WorkflowSchemeModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public updateWorkflowScheme(id: number, workflowSchemeModel: WorkflowSchemeModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public updateWorkflowScheme(id: number, workflowSchemeModel: WorkflowSchemeModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateWorkflowScheme.');
        }
        if (workflowSchemeModel === null || workflowSchemeModel === undefined) {
            throw new Error('Required parameter workflowSchemeModel was null or undefined when calling updateWorkflowScheme.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}`,
            workflowSchemeModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
