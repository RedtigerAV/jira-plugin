/* tslint:disable */

/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { IssueTypeWithStatusModel } from '../model/issueTypeWithStatus';
import { NotificationSchemeModel } from '../model/notificationScheme';
import { PageBeanProjectModel } from '../model/pageBeanProject';
import { ProjectIdentifiersModel } from '../model/projectIdentifiers';
import { ProjectInputBeanModel } from '../model/projectInputBean';
import { ProjectIssueTypeHierarchyModel } from '../model/projectIssueTypeHierarchy';
import { ProjectModel } from '../model/project';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class ProjectsService {

    protected basePath = 'https://timgo.atlassian.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create project
     * Creates a project based on a project type template, as shown in the following table:  | Project Type Key | Project Template Key |   |--|--|   | &#x60;business&#x60; | &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-content-management&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-process-control&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-procurement&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-project-management&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment&#x60;, &#x60;com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking&#x60; |   | &#x60;service_desk&#x60; | &#x60;com.atlassian.servicedesk:simplified-it-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-internal-service-desk&#x60;, &#x60;com.atlassian.servicedesk:simplified-external-service-desk&#x60; |   | &#x60;software&#x60; | &#x60;com.pyxis.greenhopper.jira:gh-simplified-agility-kanban&#x60;, &#x60;com.pyxis.greenhopper.jira:gh-simplified-agility-scrum&#x60;, &#x60;com.pyxis.greenhopper.jira:gh-simplified-basic&#x60;, &#x60;com.pyxis.greenhopper.jira:gh-simplified-kanban-classic&#x60;, &#x60;com.pyxis.greenhopper.jira:gh-simplified-scrum-classic&#x60; |   The project types are available according to the installed Jira features as follows:   *  Jira Core, the default, enables &#x60;business&#x60; projects.  *  Jira Service Desk enables &#x60;service_desk&#x60; projects.  *  Jira Software enables &#x60;software&#x60; projects.  To determine which features are installed, go to **Jira settings** &gt; **Apps** &gt; **Manage apps** and review the System Apps list. To add JIRA Software or JIRA Service Desk into a JIRA instance, use **Jira settings** &gt; **Apps** &gt; **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectInputBeanModel The JSON representation of the project being created.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createProject(projectInputBeanModel: ProjectInputBeanModel, observe?: 'body', reportProgress?: boolean): Observable<ProjectIdentifiersModel>;
    public createProject(projectInputBeanModel: ProjectInputBeanModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProjectIdentifiersModel>>;
    public createProject(projectInputBeanModel: ProjectInputBeanModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProjectIdentifiersModel>>;
    public createProject(projectInputBeanModel: ProjectInputBeanModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectInputBeanModel === null || projectInputBeanModel === undefined) {
            throw new Error('Required parameter projectInputBeanModel was null or undefined when calling createProject.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ProjectIdentifiersModel>(`${this.configuration.basePath}/rest/api/2/project`,
            projectInputBeanModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete project
     * Deletes a project.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param enableUndo EXPERIMENTAL. Whether this project is placed in the Jira recycle bin where it will be available for restoration.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProject(projectIdOrKey: string, enableUndo?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteProject(projectIdOrKey: string, enableUndo?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteProject(projectIdOrKey: string, enableUndo?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteProject(projectIdOrKey: string, enableUndo?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling deleteProject.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (enableUndo !== undefined && enableUndo !== null) {
            queryParameters = queryParameters.set('enableUndo', <any>enableUndo);
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/rest/api/2/project/${encodeURIComponent(String(projectIdOrKey))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all projects
     * Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-2-project-search-get) that supports search and pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:   *  &#x60;description&#x60; Returns the project description.  *  &#x60;issueTypes&#x60; Returns all issue types associated with the project.  *  &#x60;lead&#x60; Returns information about the the project lead.  *  &#x60;projectKeys&#x60; Returns all project keys associated with the project.
     * @param recent Returns the user\&#39;s most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session.
     * @param properties A list of project properties to return for the project. This parameter accepts a comma-separated list.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllProjects(expand?: string, recent?: number, properties?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<ProjectModel>>;
    public getAllProjects(expand?: string, recent?: number, properties?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ProjectModel>>>;
    public getAllProjects(expand?: string, recent?: number, properties?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ProjectModel>>>;
    public getAllProjects(expand?: string, recent?: number, properties?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand !== undefined && expand !== null) {
            queryParameters = queryParameters.set('expand', <any>expand);
        }
        if (recent !== undefined && recent !== null) {
            queryParameters = queryParameters.set('recent', <any>recent);
        }
        if (properties) {
            properties.forEach((element) => {
                queryParameters = queryParameters.append('properties', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ProjectModel>>(`${this.configuration.basePath}/rest/api/2/project`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all statuses for project
     * Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllStatuses(projectIdOrKey: string, observe?: 'body', reportProgress?: boolean): Observable<Array<IssueTypeWithStatusModel>>;
    public getAllStatuses(projectIdOrKey: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<IssueTypeWithStatusModel>>>;
    public getAllStatuses(projectIdOrKey: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<IssueTypeWithStatusModel>>>;
    public getAllStatuses(projectIdOrKey: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling getAllStatuses.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<IssueTypeWithStatusModel>>(`${this.configuration.basePath}/rest/api/2/project/${encodeURIComponent(String(projectIdOrKey))}/statuses`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get project issue type hierarchy
     * Get the issue type hierarchy for a next-gen project.  The issue type hierarchy for a project consists of:   *  *Epic* at level 1 (optional).  *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.  *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectId The ID of the project.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getHierarchy(projectId: number, observe?: 'body', reportProgress?: boolean): Observable<ProjectIssueTypeHierarchyModel>;
    public getHierarchy(projectId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProjectIssueTypeHierarchyModel>>;
    public getHierarchy(projectId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProjectIssueTypeHierarchyModel>>;
    public getHierarchy(projectId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getHierarchy.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ProjectIssueTypeHierarchyModel>(`${this.configuration.basePath}/rest/api/2/project/${encodeURIComponent(String(projectId))}/hierarchy`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get project notification scheme
     * Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project. See the [Get notification scheme](#api-rest-api-2-notificationscheme-id-get) resource for more information about notification schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param projectKeyOrId The project ID or project key (case sensitive).
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about any custom fields assigned to receive an event.  *  &#x60;group&#x60; Returns information about any groups assigned to receive an event.  *  &#x60;notificationSchemeEvents&#x60; Returns a list of event associations. This list is returned for all expandable information.  *  &#x60;projectRole&#x60; Returns information about any project roles assigned to receive an event.  *  &#x60;user&#x60; Returns information about any users assigned to receive an event.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNotificationScheme(projectKeyOrId: string, expand?: string, observe?: 'body', reportProgress?: boolean): Observable<NotificationSchemeModel>;
    public getNotificationScheme(projectKeyOrId: string, expand?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<NotificationSchemeModel>>;
    public getNotificationScheme(projectKeyOrId: string, expand?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<NotificationSchemeModel>>;
    public getNotificationScheme(projectKeyOrId: string, expand?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectKeyOrId === null || projectKeyOrId === undefined) {
            throw new Error('Required parameter projectKeyOrId was null or undefined when calling getNotificationScheme.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand !== undefined && expand !== null) {
            queryParameters = queryParameters.set('expand', <any>expand);
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<NotificationSchemeModel>(`${this.configuration.basePath}/rest/api/2/project/${encodeURIComponent(String(projectKeyOrId))}/notificationscheme`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get project
     * Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:   *  &#x60;description&#x60; The project description.  *  &#x60;issueTypes&#x60; The issue types associated with the project.  *  &#x60;lead&#x60; The project lead.  *  &#x60;projectKeys&#x60; All project keys associated with the project.  *  &#x60;issueTypeHierarchy&#x60; The project issue type hierarchy.
     * @param properties A list of project properties to return for the project. This parameter accepts a comma-separated list.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProject(projectIdOrKey: string, expand?: string, properties?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<ProjectModel>;
    public getProject(projectIdOrKey: string, expand?: string, properties?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProjectModel>>;
    public getProject(projectIdOrKey: string, expand?: string, properties?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProjectModel>>;
    public getProject(projectIdOrKey: string, expand?: string, properties?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling getProject.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand !== undefined && expand !== null) {
            queryParameters = queryParameters.set('expand', <any>expand);
        }
        if (properties) {
            properties.forEach((element) => {
                queryParameters = queryParameters.append('properties', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ProjectModel>(`${this.configuration.basePath}/rest/api/2/project/${encodeURIComponent(String(projectIdOrKey))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get projects paginated
     * Returns projects visible to the user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
     * @param startAt The index of the first item to return in a page of results (page offset).
     * @param maxResults The maximum number of items to return per page.
     * @param orderBy [Order](#ordering) the results by a field.   *  &#x60;category&#x60; Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-2-projectCategory-get).  *  &#x60;issueCount&#x60; Sorts by the total number of issues in each project.  *  &#x60;key&#x60; Sorts by project key.  *  &#x60;lastIssueUpdatedTime&#x60; Sorts by the last issue update time.  *  &#x60;name&#x60; Sorts by project name.  *  &#x60;owner&#x60; Sorts by project lead.
     * @param query Filter the results using a literal string. Projects with a matching &#x60;key&#x60; or &#x60;name&#x60; are returned (case insensitive).
     * @param typeKey Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are &#x60;business&#x60;, &#x60;service_desk&#x60;, and &#x60;software&#x60;.
     * @param categoryId The ID of the project\&#39;s category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-2-projectCategory-get) operation.
     * @param searchBy 
     * @param action Filter results by projects for which the user can:   *  &#x60;view&#x60; the project, meaning that they have one of the following permissions:           *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.      *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.      *  site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL\&quot;)).  *  &#x60;browse&#x60; the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.  *  &#x60;edit&#x60; the project, meaning that they have one of the following permissions:           *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.      *  site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL\&quot;)).
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:   *  &#x60;description&#x60; Returns the project description.  *  &#x60;projectKeys&#x60; Returns all project keys associated with a project.  *  &#x60;lead&#x60; Returns information about the the project lead.  *  &#x60;issueTypes&#x60; Returns all issue types associated with the project.  *  &#x60;url&#x60; Returns the URL associated with the project.  *  &#x60;insight&#x60; EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.
     * @param status EXPERIMENTAL. Filter results by project delete status:   *  &#x60;live&#x60; Search live (undeleted) projects.  *  &#x60;deleted&#x60; Search deleted projects, those in the recycle bin.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchProjects(startAt?: number, maxResults?: number, orderBy?: 'category' | '-category' | '+category' | 'key' | '-key' | '+key' | 'name' | '-name' | '+name' | 'owner' | '-owner' | '+owner' | 'issueCount' | '-issueCount' | '+issueCount' | 'lastIssueUpdatedDate' | '-lastIssueUpdatedDate' | '+lastIssueUpdatedDate' | 'size' | '+size' | '-size', query?: string, typeKey?: string, categoryId?: number, searchBy?: string, action?: 'view' | 'browse' | 'edit', expand?: string, status?: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<PageBeanProjectModel>;
    public searchProjects(startAt?: number, maxResults?: number, orderBy?: 'category' | '-category' | '+category' | 'key' | '-key' | '+key' | 'name' | '-name' | '+name' | 'owner' | '-owner' | '+owner' | 'issueCount' | '-issueCount' | '+issueCount' | 'lastIssueUpdatedDate' | '-lastIssueUpdatedDate' | '+lastIssueUpdatedDate' | 'size' | '+size' | '-size', query?: string, typeKey?: string, categoryId?: number, searchBy?: string, action?: 'view' | 'browse' | 'edit', expand?: string, status?: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PageBeanProjectModel>>;
    public searchProjects(startAt?: number, maxResults?: number, orderBy?: 'category' | '-category' | '+category' | 'key' | '-key' | '+key' | 'name' | '-name' | '+name' | 'owner' | '-owner' | '+owner' | 'issueCount' | '-issueCount' | '+issueCount' | 'lastIssueUpdatedDate' | '-lastIssueUpdatedDate' | '+lastIssueUpdatedDate' | 'size' | '+size' | '-size', query?: string, typeKey?: string, categoryId?: number, searchBy?: string, action?: 'view' | 'browse' | 'edit', expand?: string, status?: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PageBeanProjectModel>>;
    public searchProjects(startAt?: number, maxResults?: number, orderBy?: 'category' | '-category' | '+category' | 'key' | '-key' | '+key' | 'name' | '-name' | '+name' | 'owner' | '-owner' | '+owner' | 'issueCount' | '-issueCount' | '+issueCount' | 'lastIssueUpdatedDate' | '-lastIssueUpdatedDate' | '+lastIssueUpdatedDate' | 'size' | '+size' | '-size', query?: string, typeKey?: string, categoryId?: number, searchBy?: string, action?: 'view' | 'browse' | 'edit', expand?: string, status?: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startAt !== undefined && startAt !== null) {
            queryParameters = queryParameters.set('startAt', <any>startAt);
        }
        if (maxResults !== undefined && maxResults !== null) {
            queryParameters = queryParameters.set('maxResults', <any>maxResults);
        }
        if (orderBy !== undefined && orderBy !== null) {
            queryParameters = queryParameters.set('orderBy', <any>orderBy);
        }
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (typeKey !== undefined && typeKey !== null) {
            queryParameters = queryParameters.set('typeKey', <any>typeKey);
        }
        if (categoryId !== undefined && categoryId !== null) {
            queryParameters = queryParameters.set('categoryId', <any>categoryId);
        }
        if (searchBy !== undefined && searchBy !== null) {
            queryParameters = queryParameters.set('searchBy', <any>searchBy);
        }
        if (action !== undefined && action !== null) {
            queryParameters = queryParameters.set('action', <any>action);
        }
        if (expand !== undefined && expand !== null) {
            queryParameters = queryParameters.set('expand', <any>expand);
        }
        if (status) {
            status.forEach((element) => {
                queryParameters = queryParameters.append('status', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PageBeanProjectModel>(`${this.configuration.basePath}/rest/api/2/project/search`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update project
     * Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.  All parameters are optional in the body of the request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param projectInputBeanModel The project details to be updated.
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:   *  &#x60;description&#x60; The project description.  *  &#x60;issueTypes&#x60; The issue types associated with the project.  *  &#x60;lead&#x60; The project lead.  *  &#x60;projectKeys&#x60; All project keys associated with the project.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProject(projectIdOrKey: string, projectInputBeanModel: ProjectInputBeanModel, expand?: string, observe?: 'body', reportProgress?: boolean): Observable<ProjectModel>;
    public updateProject(projectIdOrKey: string, projectInputBeanModel: ProjectInputBeanModel, expand?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProjectModel>>;
    public updateProject(projectIdOrKey: string, projectInputBeanModel: ProjectInputBeanModel, expand?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProjectModel>>;
    public updateProject(projectIdOrKey: string, projectInputBeanModel: ProjectInputBeanModel, expand?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling updateProject.');
        }
        if (projectInputBeanModel === null || projectInputBeanModel === undefined) {
            throw new Error('Required parameter projectInputBeanModel was null or undefined when calling updateProject.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand !== undefined && expand !== null) {
            queryParameters = queryParameters.set('expand', <any>expand);
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<ProjectModel>(`${this.configuration.basePath}/rest/api/2/project/${encodeURIComponent(String(projectIdOrKey))}`,
            projectInputBeanModel,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update project type
     * Deprecated, this feature is no longer supported and no alternatives are available, see [Convert project to a different template or type](https://confluence.atlassian.com/x/yEKeOQ). Updates a [project type](https://confluence.atlassian.com/x/GwiiLQ). The project type can be updated for classic projects only, project type cannot be updated for next-gen projects.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param projectIdOrKey The project ID or project key (case sensitive).
     * @param newProjectTypeKey The key of the new project type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProjectType(projectIdOrKey: string, newProjectTypeKey: 'software' | 'service_desk' | 'business', observe?: 'body', reportProgress?: boolean): Observable<ProjectModel>;
    public updateProjectType(projectIdOrKey: string, newProjectTypeKey: 'software' | 'service_desk' | 'business', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProjectModel>>;
    public updateProjectType(projectIdOrKey: string, newProjectTypeKey: 'software' | 'service_desk' | 'business', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProjectModel>>;
    public updateProjectType(projectIdOrKey: string, newProjectTypeKey: 'software' | 'service_desk' | 'business', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectIdOrKey === null || projectIdOrKey === undefined) {
            throw new Error('Required parameter projectIdOrKey was null or undefined when calling updateProjectType.');
        }
        if (newProjectTypeKey === null || newProjectTypeKey === undefined) {
            throw new Error('Required parameter newProjectTypeKey was null or undefined when calling updateProjectType.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<ProjectModel>(`${this.configuration.basePath}/rest/api/2/project/${encodeURIComponent(String(projectIdOrKey))}/type/${encodeURIComponent(String(newProjectTypeKey))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
