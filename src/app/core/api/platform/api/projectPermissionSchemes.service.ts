/* tslint:disable */

/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { IdBeanModel } from '../model/idBean';
import { PermissionSchemeModel } from '../model/permissionScheme';
import { ProjectIssueSecurityLevelsModel } from '../model/projectIssueSecurityLevels';
import { SecuritySchemeModel } from '../model/securityScheme';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class ProjectPermissionSchemesService {

    protected basePath = 'https://timgo.atlassian.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Assign permission scheme
     * Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
     * @param projectKeyOrId The project ID or project key (case sensitive).
     * @param idBeanModel 
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public assignPermissionScheme(projectKeyOrId: string, idBeanModel: IdBeanModel, expand?: string, observe?: 'body', reportProgress?: boolean): Observable<PermissionSchemeModel>;
    public assignPermissionScheme(projectKeyOrId: string, idBeanModel: IdBeanModel, expand?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PermissionSchemeModel>>;
    public assignPermissionScheme(projectKeyOrId: string, idBeanModel: IdBeanModel, expand?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PermissionSchemeModel>>;
    public assignPermissionScheme(projectKeyOrId: string, idBeanModel: IdBeanModel, expand?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectKeyOrId === null || projectKeyOrId === undefined) {
            throw new Error('Required parameter projectKeyOrId was null or undefined when calling assignPermissionScheme.');
        }
        if (idBeanModel === null || idBeanModel === undefined) {
            throw new Error('Required parameter idBeanModel was null or undefined when calling assignPermissionScheme.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand !== undefined && expand !== null) {
            queryParameters = queryParameters.set('expand', <any>expand);
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<PermissionSchemeModel>(`${this.configuration.basePath}/rest/api/2/project/${encodeURIComponent(String(projectKeyOrId))}/permissionscheme`,
            idBeanModel,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get assigned permission scheme
     * Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param projectKeyOrId The project ID or project key (case sensitive).
     * @param expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssignedPermissionScheme(projectKeyOrId: string, expand?: string, observe?: 'body', reportProgress?: boolean): Observable<PermissionSchemeModel>;
    public getAssignedPermissionScheme(projectKeyOrId: string, expand?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PermissionSchemeModel>>;
    public getAssignedPermissionScheme(projectKeyOrId: string, expand?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PermissionSchemeModel>>;
    public getAssignedPermissionScheme(projectKeyOrId: string, expand?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectKeyOrId === null || projectKeyOrId === undefined) {
            throw new Error('Required parameter projectKeyOrId was null or undefined when calling getAssignedPermissionScheme.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (expand !== undefined && expand !== null) {
            queryParameters = queryParameters.set('expand', <any>expand);
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<PermissionSchemeModel>(`${this.configuration.basePath}/rest/api/2/project/${encodeURIComponent(String(projectKeyOrId))}/permissionscheme`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get project issue security scheme
     * Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
     * @param projectKeyOrId The project ID or project key (case sensitive).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIssueSecurityScheme(projectKeyOrId: string, observe?: 'body', reportProgress?: boolean): Observable<SecuritySchemeModel>;
    public getIssueSecurityScheme(projectKeyOrId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SecuritySchemeModel>>;
    public getIssueSecurityScheme(projectKeyOrId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SecuritySchemeModel>>;
    public getIssueSecurityScheme(projectKeyOrId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectKeyOrId === null || projectKeyOrId === undefined) {
            throw new Error('Required parameter projectKeyOrId was null or undefined when calling getIssueSecurityScheme.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SecuritySchemeModel>(`${this.configuration.basePath}/rest/api/2/project/${encodeURIComponent(String(projectKeyOrId))}/issuesecuritylevelscheme`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get project issue security levels
     * Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project.
     * @param projectKeyOrId The project ID or project key (case sensitive).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSecurityLevelsForProject(projectKeyOrId: string, observe?: 'body', reportProgress?: boolean): Observable<ProjectIssueSecurityLevelsModel>;
    public getSecurityLevelsForProject(projectKeyOrId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ProjectIssueSecurityLevelsModel>>;
    public getSecurityLevelsForProject(projectKeyOrId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ProjectIssueSecurityLevelsModel>>;
    public getSecurityLevelsForProject(projectKeyOrId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (projectKeyOrId === null || projectKeyOrId === undefined) {
            throw new Error('Required parameter projectKeyOrId was null or undefined when calling getSecurityLevelsForProject.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ProjectIssueSecurityLevelsModel>(`${this.configuration.basePath}/rest/api/2/project/${encodeURIComponent(String(projectKeyOrId))}/securitylevel`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
