/* tslint:disable */

/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { DefaultWorkflowModel } from '../model/defaultWorkflow';
import { IssueTypeWorkflowMappingModel } from '../model/issueTypeWorkflowMapping';
import { IssueTypesWorkflowMappingModel } from '../model/issueTypesWorkflowMapping';
import { WorkflowSchemeModel } from '../model/workflowScheme';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class WorkflowSchemeDraftsService {

    protected basePath = 'https://timgo.atlassian.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create draft workflow scheme
     * Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the active workflow scheme that the draft is created from.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createWorkflowSchemeDraftFromParent(id: number, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public createWorkflowSchemeDraftFromParent(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public createWorkflowSchemeDraftFromParent(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public createWorkflowSchemeDraftFromParent(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling createWorkflowSchemeDraftFromParent.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/createdraft`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete draft default workflow
     * Resets the default workflow for a workflow scheme\&#39;s draft. That is, the default workflow is set to Jira\&#39;s system workflow (the *jira* workflow).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDraftDefaultWorkflow(id: number, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public deleteDraftDefaultWorkflow(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public deleteDraftDefaultWorkflow(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public deleteDraftDefaultWorkflow(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteDraftDefaultWorkflow.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/draft/default`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete issue types for workflow in draft workflow scheme
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme\&#39;s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param workflowName The name of the workflow.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDraftWorkflowMapping(id: number, workflowName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteDraftWorkflowMapping(id: number, workflowName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteDraftWorkflowMapping(id: number, workflowName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteDraftWorkflowMapping(id: number, workflowName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteDraftWorkflowMapping.');
        }
        if (workflowName === null || workflowName === undefined) {
            throw new Error('Required parameter workflowName was null or undefined when calling deleteDraftWorkflowMapping.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (workflowName !== undefined && workflowName !== null) {
            queryParameters = queryParameters.set('workflowName', <any>workflowName);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/draft/workflow`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete draft workflow scheme
     * Deletes a draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the active workflow scheme that the draft was created from.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteWorkflowSchemeDraft(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteWorkflowSchemeDraft(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteWorkflowSchemeDraft(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteWorkflowSchemeDraft(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteWorkflowSchemeDraft.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/draft`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete workflow for issue type in draft workflow scheme
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme\&#39;s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param issueType The ID of the issue type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteWorkflowSchemeDraftIssueType(id: number, issueType: string, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public deleteWorkflowSchemeDraftIssueType(id: number, issueType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public deleteWorkflowSchemeDraftIssueType(id: number, issueType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public deleteWorkflowSchemeDraftIssueType(id: number, issueType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteWorkflowSchemeDraftIssueType.');
        }
        if (issueType === null || issueType === undefined) {
            throw new Error('Required parameter issueType was null or undefined when calling deleteWorkflowSchemeDraftIssueType.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/draft/issuetype/${encodeURIComponent(String(issueType))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get draft default workflow
     * Returns the default workflow for a workflow scheme\&#39;s draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDraftDefaultWorkflow(id: number, observe?: 'body', reportProgress?: boolean): Observable<DefaultWorkflowModel>;
    public getDraftDefaultWorkflow(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DefaultWorkflowModel>>;
    public getDraftDefaultWorkflow(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DefaultWorkflowModel>>;
    public getDraftDefaultWorkflow(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDraftDefaultWorkflow.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DefaultWorkflowModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/draft/default`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get issue types for workflows in draft workflow scheme
     * Returns the workflow-issue type mappings for a workflow scheme\&#39;s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param workflowName The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDraftWorkflow(id: number, workflowName?: string, observe?: 'body', reportProgress?: boolean): Observable<IssueTypesWorkflowMappingModel>;
    public getDraftWorkflow(id: number, workflowName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IssueTypesWorkflowMappingModel>>;
    public getDraftWorkflow(id: number, workflowName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IssueTypesWorkflowMappingModel>>;
    public getDraftWorkflow(id: number, workflowName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getDraftWorkflow.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (workflowName !== undefined && workflowName !== null) {
            queryParameters = queryParameters.set('workflowName', <any>workflowName);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<IssueTypesWorkflowMappingModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/draft/workflow`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get draft workflow scheme
     * Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.   Note that:   *  Only active workflow schemes can have draft workflow schemes.  *  An active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the active workflow scheme that the draft was created from.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkflowSchemeDraft(id: number, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public getWorkflowSchemeDraft(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public getWorkflowSchemeDraft(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public getWorkflowSchemeDraft(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getWorkflowSchemeDraft.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/draft`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get workflow for issue type in draft workflow scheme
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme\&#39;s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param issueType The ID of the issue type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkflowSchemeDraftIssueType(id: number, issueType: string, observe?: 'body', reportProgress?: boolean): Observable<IssueTypeWorkflowMappingModel>;
    public getWorkflowSchemeDraftIssueType(id: number, issueType: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IssueTypeWorkflowMappingModel>>;
    public getWorkflowSchemeDraftIssueType(id: number, issueType: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IssueTypeWorkflowMappingModel>>;
    public getWorkflowSchemeDraftIssueType(id: number, issueType: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getWorkflowSchemeDraftIssueType.');
        }
        if (issueType === null || issueType === undefined) {
            throw new Error('Required parameter issueType was null or undefined when calling getWorkflowSchemeDraftIssueType.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<IssueTypeWorkflowMappingModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/draft/issuetype/${encodeURIComponent(String(issueType))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set workflow for issue type in draft workflow scheme
     * Sets the workflow for an issue type in a workflow scheme\&#39;s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param issueType The ID of the issue type.
     * @param issueTypeWorkflowMappingModel The issue type-project mapping.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setWorkflowSchemeDraftIssueType(id: number, issueType: string, issueTypeWorkflowMappingModel: IssueTypeWorkflowMappingModel, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public setWorkflowSchemeDraftIssueType(id: number, issueType: string, issueTypeWorkflowMappingModel: IssueTypeWorkflowMappingModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public setWorkflowSchemeDraftIssueType(id: number, issueType: string, issueTypeWorkflowMappingModel: IssueTypeWorkflowMappingModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public setWorkflowSchemeDraftIssueType(id: number, issueType: string, issueTypeWorkflowMappingModel: IssueTypeWorkflowMappingModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setWorkflowSchemeDraftIssueType.');
        }
        if (issueType === null || issueType === undefined) {
            throw new Error('Required parameter issueType was null or undefined when calling setWorkflowSchemeDraftIssueType.');
        }
        if (issueTypeWorkflowMappingModel === null || issueTypeWorkflowMappingModel === undefined) {
            throw new Error('Required parameter issueTypeWorkflowMappingModel was null or undefined when calling setWorkflowSchemeDraftIssueType.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/draft/issuetype/${encodeURIComponent(String(issueType))}`,
            issueTypeWorkflowMappingModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update draft default workflow
     * Sets the default workflow for a workflow scheme\&#39;s draft.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param defaultWorkflowModel The object for the new default workflow.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDraftDefaultWorkflow(id: number, defaultWorkflowModel: DefaultWorkflowModel, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public updateDraftDefaultWorkflow(id: number, defaultWorkflowModel: DefaultWorkflowModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public updateDraftDefaultWorkflow(id: number, defaultWorkflowModel: DefaultWorkflowModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public updateDraftDefaultWorkflow(id: number, defaultWorkflowModel: DefaultWorkflowModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateDraftDefaultWorkflow.');
        }
        if (defaultWorkflowModel === null || defaultWorkflowModel === undefined) {
            throw new Error('Required parameter defaultWorkflowModel was null or undefined when calling updateDraftDefaultWorkflow.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/draft/default`,
            defaultWorkflowModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set issue types for workflow in workflow scheme
     * Sets the issue types for a workflow in a workflow scheme\&#39;s draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the workflow scheme that the draft belongs to.
     * @param workflowName The name of the workflow.
     * @param issueTypesWorkflowMappingModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDraftWorkflowMapping(id: number, workflowName: string, issueTypesWorkflowMappingModel: IssueTypesWorkflowMappingModel, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public updateDraftWorkflowMapping(id: number, workflowName: string, issueTypesWorkflowMappingModel: IssueTypesWorkflowMappingModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public updateDraftWorkflowMapping(id: number, workflowName: string, issueTypesWorkflowMappingModel: IssueTypesWorkflowMappingModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public updateDraftWorkflowMapping(id: number, workflowName: string, issueTypesWorkflowMappingModel: IssueTypesWorkflowMappingModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateDraftWorkflowMapping.');
        }
        if (workflowName === null || workflowName === undefined) {
            throw new Error('Required parameter workflowName was null or undefined when calling updateDraftWorkflowMapping.');
        }
        if (issueTypesWorkflowMappingModel === null || issueTypesWorkflowMappingModel === undefined) {
            throw new Error('Required parameter issueTypesWorkflowMappingModel was null or undefined when calling updateDraftWorkflowMapping.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (workflowName !== undefined && workflowName !== null) {
            queryParameters = queryParameters.set('workflowName', <any>workflowName);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/draft/workflow`,
            issueTypesWorkflowMappingModel,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update draft workflow scheme
     * Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param id The ID of the active workflow scheme that the draft was created from.
     * @param workflowSchemeModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateWorkflowSchemeDraft(id: number, workflowSchemeModel: WorkflowSchemeModel, observe?: 'body', reportProgress?: boolean): Observable<WorkflowSchemeModel>;
    public updateWorkflowSchemeDraft(id: number, workflowSchemeModel: WorkflowSchemeModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowSchemeModel>>;
    public updateWorkflowSchemeDraft(id: number, workflowSchemeModel: WorkflowSchemeModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowSchemeModel>>;
    public updateWorkflowSchemeDraft(id: number, workflowSchemeModel: WorkflowSchemeModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling updateWorkflowSchemeDraft.');
        }
        if (workflowSchemeModel === null || workflowSchemeModel === undefined) {
            throw new Error('Required parameter workflowSchemeModel was null or undefined when calling updateWorkflowSchemeDraft.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<WorkflowSchemeModel>(`${this.configuration.basePath}/rest/api/3/workflowscheme/${encodeURIComponent(String(id))}/draft`,
            workflowSchemeModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
