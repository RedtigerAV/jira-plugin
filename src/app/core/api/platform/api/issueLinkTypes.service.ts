/* tslint:disable */

/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { IssueLinkTypeModel } from '../model/issueLinkType';
import { IssueLinkTypesModel } from '../model/issueLinkTypes';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class IssueLinkTypesService {

    protected basePath = 'https://timgo.atlassian.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create issue link type
     * Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link\&#39;s inward and outward relationships.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueLinkTypeModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createIssueLinkType(issueLinkTypeModel: IssueLinkTypeModel, observe?: 'body', reportProgress?: boolean): Observable<IssueLinkTypeModel>;
    public createIssueLinkType(issueLinkTypeModel: IssueLinkTypeModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IssueLinkTypeModel>>;
    public createIssueLinkType(issueLinkTypeModel: IssueLinkTypeModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IssueLinkTypeModel>>;
    public createIssueLinkType(issueLinkTypeModel: IssueLinkTypeModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (issueLinkTypeModel === null || issueLinkTypeModel === undefined) {
            throw new Error('Required parameter issueLinkTypeModel was null or undefined when calling createIssueLinkType.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<IssueLinkTypeModel>(`${this.configuration.basePath}/rest/api/2/issueLinkType`,
            issueLinkTypeModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete issue link type
     * Deletes an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueLinkTypeId The ID of the issue link type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteIssueLinkType(issueLinkTypeId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteIssueLinkType(issueLinkTypeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteIssueLinkType(issueLinkTypeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteIssueLinkType(issueLinkTypeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (issueLinkTypeId === null || issueLinkTypeId === undefined) {
            throw new Error('Required parameter issueLinkTypeId was null or undefined when calling deleteIssueLinkType.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/rest/api/2/issueLinkType/${encodeURIComponent(String(issueLinkTypeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get issue link type
     * Returns an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
     * @param issueLinkTypeId The ID of the issue link type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIssueLinkType(issueLinkTypeId: string, observe?: 'body', reportProgress?: boolean): Observable<IssueLinkTypeModel>;
    public getIssueLinkType(issueLinkTypeId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IssueLinkTypeModel>>;
    public getIssueLinkType(issueLinkTypeId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IssueLinkTypeModel>>;
    public getIssueLinkType(issueLinkTypeId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (issueLinkTypeId === null || issueLinkTypeId === undefined) {
            throw new Error('Required parameter issueLinkTypeId was null or undefined when calling getIssueLinkType.');
        }

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<IssueLinkTypeModel>(`${this.configuration.basePath}/rest/api/2/issueLinkType/${encodeURIComponent(String(issueLinkTypeId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get issue link types
     * Returns a list of all issue link types.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIssueLinkTypes(observe?: 'body', reportProgress?: boolean): Observable<IssueLinkTypesModel>;
    public getIssueLinkTypes(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IssueLinkTypesModel>>;
    public getIssueLinkTypes(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IssueLinkTypesModel>>;
    public getIssueLinkTypes(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (OAuth2) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<IssueLinkTypesModel>(`${this.configuration.basePath}/rest/api/2/issueLinkType`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update issue link type
     * Updates an issue link type.  To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param issueLinkTypeId The ID of the issue link type.
     * @param issueLinkTypeModel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateIssueLinkType(issueLinkTypeId: string, issueLinkTypeModel: IssueLinkTypeModel, observe?: 'body', reportProgress?: boolean): Observable<IssueLinkTypeModel>;
    public updateIssueLinkType(issueLinkTypeId: string, issueLinkTypeModel: IssueLinkTypeModel, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<IssueLinkTypeModel>>;
    public updateIssueLinkType(issueLinkTypeId: string, issueLinkTypeModel: IssueLinkTypeModel, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<IssueLinkTypeModel>>;
    public updateIssueLinkType(issueLinkTypeId: string, issueLinkTypeModel: IssueLinkTypeModel, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (issueLinkTypeId === null || issueLinkTypeId === undefined) {
            throw new Error('Required parameter issueLinkTypeId was null or undefined when calling updateIssueLinkType.');
        }
        if (issueLinkTypeModel === null || issueLinkTypeModel === undefined) {
            throw new Error('Required parameter issueLinkTypeModel was null or undefined when calling updateIssueLinkType.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<IssueLinkTypeModel>(`${this.configuration.basePath}/rest/api/2/issueLinkType/${encodeURIComponent(String(issueLinkTypeId))}`,
            issueLinkTypeModel,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
