/* tslint:disable */

/* tslint:disable */

/* tslint:disable */

/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AvatarModel } from '../model/avatar';
import { AvatarsModel } from '../model/avatars';
import { SystemAvatarsModel } from '../model/systemAvatars';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class AvatarsService {

    protected basePath = 'https://timgo.atlassian.net';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete avatar
     * Deletes an avatar from a project or issue type.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param type The avatar type.
     * @param owningObjectId The ID of the item the avatar is associated with.
     * @param id The ID of the avatar.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAvatar(type: 'project' | 'issuetype', owningObjectId: string, id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAvatar(type: 'project' | 'issuetype', owningObjectId: string, id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAvatar(type: 'project' | 'issuetype', owningObjectId: string, id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAvatar(type: 'project' | 'issuetype', owningObjectId: string, id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling deleteAvatar.');
        }
        if (owningObjectId === null || owningObjectId === undefined) {
            throw new Error('Required parameter owningObjectId was null or undefined when calling deleteAvatar.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteAvatar.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.configuration.basePath}/rest/api/2/universal_avatar/type/${encodeURIComponent(String(type))}/owner/${encodeURIComponent(String(owningObjectId))}/avatar/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get system avatars by type
     * Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param type The avatar type.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSystemAvatars(type: 'issuetype' | 'project' | 'user', observe?: 'body', reportProgress?: boolean): Observable<SystemAvatarsModel>;
    public getAllSystemAvatars(type: 'issuetype' | 'project' | 'user', observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SystemAvatarsModel>>;
    public getAllSystemAvatars(type: 'issuetype' | 'project' | 'user', observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SystemAvatarsModel>>;
    public getAllSystemAvatars(type: 'issuetype' | 'project' | 'user', observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getAllSystemAvatars.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SystemAvatarsModel>(`${this.configuration.basePath}/rest/api/2/avatar/${encodeURIComponent(String(type))}/system`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get avatars
     * Returns the system and custom avatars for a project or issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.
     * @param type The avatar type.
     * @param entityId The ID of the item the avatar is associated with.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAvatars(type: 'project' | 'issuetype', entityId: string, observe?: 'body', reportProgress?: boolean): Observable<AvatarsModel>;
    public getAvatars(type: 'project' | 'issuetype', entityId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AvatarsModel>>;
    public getAvatars(type: 'project' | 'issuetype', entityId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AvatarsModel>>;
    public getAvatars(type: 'project' | 'issuetype', entityId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling getAvatars.');
        }
        if (entityId === null || entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling getAvatars.');
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AvatarsModel>(`${this.configuration.basePath}/rest/api/2/universal_avatar/type/${encodeURIComponent(String(type))}/owner/${encodeURIComponent(String(entityId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Load avatar
     * Loads a custom avatar for a project or issue type.  Specify the avatar\&#39;s local file location in the body of the request. Also, include the following headers:   *  &#x60;X-Atlassian-Token: no-check&#x60; To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).  *  &#x60;Content-Type: image/image type&#x60; Valid image types are JPEG, GIF, or PNG.  For example:   &#x60;curl --request POST &#x60;  &#x60;--user email@example.com:&lt;api_token&gt; &#x60;  &#x60;--header \&#39;X-Atlassian-Token: no-check\&#39; &#x60;  &#x60;--header \&#39;Content-Type: image/&lt; image_type&gt;\&#39; &#x60;  &#x60;--data-binary \&quot;&lt;@/path/to/file/with/your/avatar&gt;\&quot; &#x60;  &#x60;--url \&#39;https://your-domain.atlassian.net/rest/api/2/universal_avatar/type/{type}/owner/{entityId}\&#39;&#x60;  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square\&#39;s sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use:   *  [Update issue type](#api-rest-api-2-issuetype-id-put) to set it as the issue type\&#39;s displayed avatar.  *  [Set project avatar](#api-rest-api-2-project-projectIdOrKey-avatar-put) to set it as the project\&#39;s displayed avatar.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     * @param type The avatar type.
     * @param entityId The ID of the item the avatar is associated with.
     * @param size The length of each side of the crop region.
     * @param body 
     * @param x The X coordinate of the top-left corner of the crop region.
     * @param y The Y coordinate of the top-left corner of the crop region.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storeAvatar(type: 'project' | 'issuetype', entityId: string, size: number, body: object, x?: number, y?: number, observe?: 'body', reportProgress?: boolean): Observable<AvatarModel>;
    public storeAvatar(type: 'project' | 'issuetype', entityId: string, size: number, body: object, x?: number, y?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AvatarModel>>;
    public storeAvatar(type: 'project' | 'issuetype', entityId: string, size: number, body: object, x?: number, y?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AvatarModel>>;
    public storeAvatar(type: 'project' | 'issuetype', entityId: string, size: number, body: object, x?: number, y?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (type === null || type === undefined) {
            throw new Error('Required parameter type was null or undefined when calling storeAvatar.');
        }
        if (entityId === null || entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling storeAvatar.');
        }
        if (size === null || size === undefined) {
            throw new Error('Required parameter size was null or undefined when calling storeAvatar.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling storeAvatar.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (x !== undefined && x !== null) {
            queryParameters = queryParameters.set('x', <any>x);
        }
        if (y !== undefined && y !== null) {
            queryParameters = queryParameters.set('y', <any>y);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }

        let headers = this.defaultHeaders;

        // authentication (basicAuth) required
        if (this.configuration.username || this.configuration.password) {
            headers = headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }
        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<AvatarModel>(`${this.configuration.basePath}/rest/api/2/universal_avatar/type/${encodeURIComponent(String(type))}/owner/${encodeURIComponent(String(entityId))}`,
            body,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
